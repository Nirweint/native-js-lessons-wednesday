[{"F:\\it-incubator\\native-js-lessons-wednesday\\src\\index.tsx":"1","F:\\it-incubator\\native-js-lessons-wednesday\\src\\redux\\state.ts":"2","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson1\\lesson1.tsx":"3","F:\\it-incubator\\native-js-lessons-wednesday\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx":"4","F:\\it-incubator\\native-js-lessons-wednesday\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx":"5","F:\\it-incubator\\native-js-lessons-wednesday\\src\\redux\\currencyReducer.ts":"6","F:\\it-incubator\\native-js-lessons-wednesday\\src\\redux\\actions.ts":"7","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson1\\selectors.ts":"8","F:\\it-incubator\\native-js-lessons-wednesday\\src\\App.tsx":"9","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson2\\lesson2.ts":"10","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson3\\lesson_3.ts":"11","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson3\\Lesson3.tsx":"12","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson3\\API.ts":"13"},{"size":319,"mtime":1609752860853,"results":"14","hashOfConfig":"15"},{"size":286,"mtime":1609751766196,"results":"16","hashOfConfig":"15"},{"size":860,"mtime":1609756877852,"results":"17","hashOfConfig":"18"},{"size":3871,"mtime":1609757735301,"results":"19","hashOfConfig":"18"},{"size":2869,"mtime":1639322465742,"results":"20","hashOfConfig":"18"},{"size":1509,"mtime":1639322531175,"results":"21","hashOfConfig":"15"},{"size":1417,"mtime":1639312226472,"results":"22","hashOfConfig":"18"},{"size":564,"mtime":1639321951915,"results":"23","hashOfConfig":"18"},{"size":607,"mtime":1640513639896,"results":"24","hashOfConfig":"15"},{"size":6524,"mtime":1639922662795,"results":"25","hashOfConfig":"15"},{"size":1520,"mtime":1640524283695,"results":"26","hashOfConfig":"15"},{"size":1895,"mtime":1640522046561,"results":"27","hashOfConfig":"15"},{"size":537,"mtime":1641633010703,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1gx5b18",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yq37y8",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\it-incubator\\native-js-lessons-wednesday\\src\\index.tsx",[],["57","58"],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\redux\\state.ts",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson1\\lesson1.tsx",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\redux\\currencyReducer.ts",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\redux\\actions.ts",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson1\\selectors.ts",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\App.tsx",["59"],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson2\\lesson2.ts",["60"],"console.log('lesson 2');\r\n\r\n// Lexical environment\r\n// http://jsflow.org/docs/lex-env/\r\n\r\n//// Closure\r\n// https://learn.javascript.ru/closure\r\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898\r\n// https://www.youtube.com/watch?v=pahO5XjnfLA\r\n\r\n//// Сurrying\r\n// https://learn.javascript.ru/currying-partials\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827\r\n\r\n// Pattern Module\r\n// https://habr.com/ru/company/ruvds/blog/419997/\r\n\r\n// Recursion\r\n// https://learn.javascript.ru/recursion\r\n// https://www.youtube.com/watch?v=Kuq6oIN3PH0\r\n\r\n\r\n// Task 01\r\n// Реализовать функцию sum которая суммирует 2 числа следующим образом sum(3)(6) === 9\r\n\r\n//  const sum = (num1: number) => {\r\n//      return (num2: number) => {\r\n//          return num1 + num2\r\n//      }\r\n//  }\r\n//\r\n// console.log(sum(3)(6))\r\n\r\n// Task 02\r\n// Реализовать функцию makeCounter которая работает следующим образом:\r\n\r\n// const  makeCounter = () =>{\r\n//     let i = 0\r\n//     return () => {\r\n//         return i = i + 1\r\n//     }\r\n// }\r\n// const counter = makeCounter();\r\n// console.log(counter()); // 1\r\n// console.log(counter()); // 2\r\n// const counter2 = makeCounter();\r\n// console.log(counter2()); // 1\r\n// console.log(counter()); // 3\r\n\r\n// Task 03\r\n// Переписать функцию из Task 02 так, что бы она принимала число в качестве аргумента и это число было стартовым значением счетчика\r\n// и возвращала следующий объект методов:\r\n// increase: +1\r\n// decrease: -1\r\n// reset: установить счетчик в 0;\r\n// set: установить счетчик в заданное значение;\r\n\r\n// const makeSmartCounter = (startNumber: number) =>{\r\n//     let res = startNumber\r\n//\r\n//     return {\r\n//         increase() {\r\n//             return startNumber += 1\r\n//         },\r\n//         decrease() {\r\n//             return startNumber -= 1\r\n//         },\r\n//         reset() {\r\n//             return startNumber = 0\r\n//         },\r\n//         set() {\r\n//             return startNumber = res\r\n//         },\r\n//     }\r\n// }\r\n//\r\n// let some = (makeSmartCounter(20))\r\n// console.log(some.increase()) // 21\r\n// console.log(some.decrease()) // 20\r\n// console.log(some.decrease()) // 19\r\n// console.log(some.set()) // 20\r\n// console.log(some.reset()) // 0\r\n// let one = (makeSmartCounter(10))\r\n// console.log(one.increase()) // 11\r\n// console.log(some.increase()) // 1\r\n\r\n\r\n// Task 04*\r\n// Реализовать функцию superSum которая принимает число в качестве аргумента, которое указывает на количество слагаемых\r\n// и что бы корректно работали следующие вызовы:\r\n\r\n// function superSum(num: number) {\r\n//     if (num <= 0) return 0;\r\n//     if (num === 1) return (n: number) => n;\r\n//\r\n//     let _arguments: number[] = [];\r\n//\r\n//     function helper(...args: number[]) {\r\n//         _arguments = [..._arguments, ...args];\r\n//         if (_arguments.length >= num) {\r\n//             _arguments.length = num;\r\n//             return _arguments.reduce((acc, current) => acc + current)\r\n//         } else {\r\n//             return helper;\r\n//         }\r\n//     }\r\n//     return helper\r\n// }\r\n// // @ts-ignore\r\n// console.log(superSum(0))\r\n// // @ts-ignore\r\n// console.log(superSum(3)(2)(5)(3))\r\n// // @ts-ignore\r\n// console.log(superSum(3)(2)(5,3))\r\n// // @ts-ignore\r\n// console.log(superSum(3)(2,5,3))\r\n// // @ts-ignore\r\n// console.log(superSum(3)(2,5)(3))\r\n// // @ts-ignore\r\n// console.log(superSum(3)(2,5)(3,9))\r\n\r\n\r\n// P.S. типизируйте только аргументы, а при вызове функции используйте @ts-ignore\r\n\r\n// Task 05\r\n// решить все задачи по рекурсии которые даны в конце статьи https://learn.javascript.ru/recursion\r\n// @ts-ignore\r\n// function sumTo(n: number) {\r\n//     if (n === 1) return n\r\n//\r\n//     return n + sumTo(n - 1)\r\n// }\r\n//\r\n// console.log(sumTo(100))\r\n\r\n// function factorial(n: number) {\r\n//     if (n === 1) return n\r\n//     return n * factorial(n - 1)\r\n// }\r\n//\r\n// console.log(factorial(5))\r\n\r\n// function fib(n: number) {\r\n//     if (n <= 1) return n\r\n//     return fib(n - 1) + fib(n - 2)\r\n// }\r\n//\r\n// console.log(fib(77))\r\n//\r\n// function fib(n: number) {\r\n//     let a = 1;\r\n//     let b = 1;\r\n//     for (let i = 3; i <= n; i++) {\r\n//         let c = a + b;\r\n//         a = b;\r\n//         b = c;\r\n//     }\r\n//     return b;\r\n// }\r\n\r\n// let listForTry = {\r\n//     value: 1,\r\n//     next: {\r\n//         value: 2,\r\n//         next: {\r\n//             value: 3,\r\n//             next: {\r\n//                 value: 4,\r\n//                 next: null\r\n//             }\r\n//         }\r\n//     }\r\n// };\r\n//\r\n// function printList(list: any): any {\r\n//     console.log(list.value)\r\n//     if (list.next) {\r\n//         printList(list.next)\r\n//     }\r\n// }\r\n//\r\n// console.log(printList(listForTry))\r\n//\r\n// let listForTry = {\r\n//     value: 1,\r\n//     next: {\r\n//         value: 2,\r\n//         next: {\r\n//             value: 3,\r\n//             next: {\r\n//                 value: 4,\r\n//                 next: null\r\n//             }\r\n//         }\r\n//     }\r\n// };\r\n//\r\n// function printList(list: any): any {\r\n//     if (list.next) {\r\n//         printList(list.next)\r\n//     }\r\n//     console.log(list.value)\r\n// }\r\n//\r\n// console.log(printList(listForTry))\r\n\r\n\r\n// Task 06\r\n// написать функцию, которая повторяет функционал метода flat массива на всю глубину.\r\n\r\n// let arr3 = [1, 2, [3, 4, [5, 6]]];\r\n// // // console.log(arr3.flat(1))\r\n//\r\n// function myFlat(array: any) {\r\n//     return array.reduce((acc: any, current: any) => {\r\n//         acc.concat(Array.isArray(current) ? myFlat(current) : current)\r\n//     }, [])\r\n// }\r\n//\r\n// console.log(myFlat(arr3))\r\n\r\n// just a plug\r\nexport default () => {\r\n\r\n};","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson3\\lesson_3.ts",["61"],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson3\\Lesson3.tsx",[],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson3\\API.ts",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":15},{"ruleId":"70","severity":1,"message":"71","line":224,"column":1,"nodeType":"72","endLine":226,"endColumn":3},{"ruleId":"70","severity":1,"message":"71","line":59,"column":1,"nodeType":"72","endLine":60,"endColumn":3},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"@typescript-eslint/no-unused-vars","'Lesson1' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]