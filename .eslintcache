[{"F:\\it-incubator\\native-js-lessons-wednesday\\src\\App.tsx":"1","F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson4\\lesson_4.ts":"2"},{"size":607,"mtime":1641633884672,"results":"3","hashOfConfig":"4"},{"size":10088,"mtime":1641670846475,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1gx5b18",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"F:\\it-incubator\\native-js-lessons-wednesday\\src\\App.tsx",["11","12"],"F:\\it-incubator\\native-js-lessons-wednesday\\src\\lessons\\lesson4\\lesson_4.ts",["13","14"],"console.log('lesson 4');\r\n\r\n// http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\r\n// https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\r\n\r\n\r\n// Task 01\r\n// Создайте промис, который постоянно находиться в состоянии pending.\r\n// В конструкторе промиса выведите в консоль сообщение \"Promise is created\".\r\n// const promise = new Promise((resolve, reject) => {\r\n//     console.log(\"Promise is created\")\r\n// })\r\n// console.log(promise)\r\n\r\n// Task 02\r\n// Создайте промис, который после создания сразу же переходит в состояние resolve\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// const resolvedPromise = Promise.resolve<string>('Promise Data')\r\n//     .then(res => console.log(res))\r\n\r\n\r\n// Task 03\r\n// Создайте промис, который после создания сразу же переходит в состояние rejected\r\n// и возвращает строку 'Promise Error'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// const rejectedPromise = Promise.reject('Promise Error')\r\n//     .catch(err => console.log(err))\r\n\r\n\r\n// Task 04\r\n// Создайте промис, который переходит в состояние resolved через 3с.\r\n// (Используйте setTimeout)\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// const promise = new Promise((resolve, reject) => {\r\n//\r\n//     setTimeout(() => {\r\n//         resolve('Promise Data')\r\n//         }, 3000\r\n//     )\r\n// })\r\n//\r\n// console.log(promise.then(res => console.log(res)))\r\n\r\n\r\n// Task 05\r\n// Создайте литерал объекта handlePromise со следующими свойствами:\r\n// promise, resolve, reject, onSuccess, onError\r\n// Проинициализируйте первые три свойства null,\r\n// а последние два функциями, которые принимают один параметр и выводят\r\n// в консоль сообщения: первая - `Promise is resolved with data: ${paramName}`\r\n// вторая - `Promise is rejected with error: ${paramName}`\r\n// Создайте три обработчика события click для кнопок \"Create Promise\", \"Resolve Promise\", \"Reject Promise\".\r\n// Первый обработчик, создает промис, заполняет первые три свойства,\r\n// описаного выше объекта: свойство promise получает новый созданный промис,\r\n// свойства resolve и reject получают ссылки на соответствующие функции\r\n// resolve и reject. Следующие два обработчика запускают методы resolve и reject.\r\n\r\ntype HandlePromiseType = {\r\n    promise: null | Promise<any>\r\n    resolve: null | Function\r\n    reject: null | Function\r\n    onSuccess: (paramName: string) => void\r\n    onError: (paramName: string) => void\r\n}\r\n\r\nexport const handlePromise: HandlePromiseType = {\r\n    promise: null,\r\n    resolve: null,\r\n    reject: null,\r\n    onSuccess(paramName: string) {\r\n        return `Promise is resolved with data: ${paramName}`\r\n    },\r\n    onError(paramName: string) {\r\n        return `Promise is rejected with error: ${paramName}`\r\n    }\r\n}\r\n\r\nexport const createPromise = () => {\r\n    handlePromise.promise = new Promise((resolve, reject) => {\r\n        handlePromise.resolve = resolve\r\n        handlePromise.reject = reject\r\n    })\r\n    handlePromise.promise\r\n        .then(handlePromise.onSuccess)\r\n        .catch(handlePromise.onError)\r\n\r\n\r\n    // @ts-ignore\r\n    window.obj = handlePromise\r\n}\r\n\r\nexport const resolvePromise = () => {\r\n    handlePromise.resolve && handlePromise.resolve(\"Success\")\r\n}\r\n\r\nexport const rejectPromise = () => {\r\n    handlePromise.reject && handlePromise.reject(\"Fail\")\r\n}\r\n\r\n\r\n\r\n// Task 06\r\n// Создайте промис, который через 1 с возвращает строку \"My name is\".\r\n// Создайте функцию onSuccess, которая получает один параметр,\r\n// прибавляет к нему Ваше имя и возвращает новую строку из функции\r\n// Создайте функцию print, которая выводит в консоль значение своего параметра\r\n// Добавьте два метода then и передайте созданные функции.\r\n\r\n// const promise = new Promise((res) => {\r\n//     setTimeout(() => {\r\n//         res(\"My name is\")\r\n//     }, 1000)\r\n// })\r\n//\r\n// const onSuccess = (param: any) => {\r\n//     return `${param} Alexander`\r\n// }\r\n//\r\n// const print = (param: any) => {\r\n//     console.log(param)\r\n// }\r\n//\r\n// promise\r\n//     .then(res => onSuccess(res))\r\n//     .then(res => print(res))\r\n\r\n// Task 7\r\n// Создайте три промиса. Первый промис возвращает объект { name: \"Anna\" } через 2с,\r\n// второй промис возвращает объект {age: 16} через 3 с, а третий {city: ''} через 4с.\r\n// Получите результаты работы промисов, объедините свойства объектов\r\n// и выведите в консоль {name, age, city}\r\n\r\nlet namePromise = new Promise(res => {\r\n    setTimeout(() => {\r\n        res({name: \"Anna\"})\r\n    }, 2000)\r\n})\r\n\r\nlet agePromise = new Promise(res => {\r\n    setTimeout(() => {\r\n        res({age: 16})\r\n    }, 3000)\r\n})\r\n\r\nlet cityPromise = new Promise(res => {\r\n    setTimeout(() => {\r\n        res({city: \"Pinsk\"})\r\n    }, 4000)\r\n})\r\n\r\nlet bigPromise = Promise.all([namePromise, agePromise, cityPromise])\r\n    .then(res => {\r\n        const result: ResType = {\r\n        // @ts-ignore\r\n            name: res[0].name,\r\n            // @ts-ignore\r\n            age: res[1].age,\r\n            // @ts-ignore\r\n            city: res[2].city,\r\n        }\r\n        console.log(result)\r\n    })\r\n\r\ntype ResType = {\r\n    name: string\r\n    age: number\r\n    city: string\r\n}\r\n\r\n//task 1\r\n// setTimeout(()=> console.log(1), 0);\r\n// console.log(2);\r\n// (() => console.log(3))();\r\n// Promise.resolve(console.log(4));\r\n// 2 3 4 1 completed\r\n\r\n// Task 2\r\n//\r\n// new Promise((res, rej) => {\r\n//     console.log(1);\r\n// })\r\n// new Promise((res, rej) => {\r\n//     setTimeout(()=> console.log(2), 0);\r\n// })\r\n// Promise.resolve(setTimeout(()=> console.log(3), 0));\r\n// console.log(4);\r\n// Promise.reject(console.log(5));\r\n// 1 4 5 2 3 completed\r\n\r\n\r\n\r\n// Task 3\r\n//\r\n// (function(){\r\n//     setTimeout(()=> console.log(1), 100);\r\n// })();\r\n// console.log(2);\r\n// new Promise((res, rej) => {\r\n//     setTimeout(()=> console.log(3), 50);\r\n// })\r\n// function f() {\r\n//     console.log(4);\r\n// }\r\n// Promise.resolve(console.log(5));\r\n// 2 5 3 1 completed\r\n\r\n\r\n// Task 3a\r\n// (function(){\r\n//     setTimeout(()=> console.log(1), 100);\r\n// })();\r\n// console.log(2);\r\n// let i = 0;\r\n// while ( i < 500000000 ) {\r\n//     i++\r\n// }\r\n// new Promise((res, rej) => {\r\n//     setTimeout(()=> console.log(3), 50);\r\n// })\r\n// function f() {\r\n//     console.log(4);\r\n// }\r\n// Promise.resolve(console.log(5));\r\n// 2 5 1 3 completed\r\n\r\n//Task 4\r\n// function f(num) {\r\n//     console.log(num);\r\n// }\r\n// Promise.resolve(1)\r\n//     .then(f);\r\n// (function(){\r\n//     console.log(2);\r\n// })();\r\n// console.log(3);\r\n// new Promise((res, rej) => {\r\n//     console.log(4);\r\n// });\r\n// setTimeout(f, 0, 5);\r\n// 2 3 4 1 5 completed\r\n\r\n\r\n// Task 5\r\n//\r\n// console.log(1);\r\n// function f() {\r\n//     console.log(2);\r\n// }\r\n// setTimeout(()=>{\r\n//     console.log(3);\r\n//     let p = new Promise((res, rej) => {\r\n//         console.log(4);\r\n//         res();\r\n//     });\r\n//     p.then(() => f())\r\n// },0);\r\n// let l = new Promise((res, rej) => {\r\n//     console.log(5);\r\n//     rej();\r\n// });\r\n// l.then(res => console.log(res)).catch(() => console.log(6));\r\n// console.log(7);\r\n// 1 5 7 6 3 4 2 completed\r\n\r\n//Task 6\r\n\r\n// setTimeout(() => console.log(1), 0);\r\n// console.log(2);\r\n// new Promise((resolve, reject) => {\r\n//     setTimeout(() => reject(console.log(3)), 1000);\r\n// }).catch(() => console.log(4));\r\n// console.log(5);\r\n// 2 5 1 3 4 completed\r\n\r\n\r\n// Task 7\r\n\r\n// async function sleep(ms) {\r\n//     setTimeout(() => {\r\n//         console.log(ms);\r\n//     }, ms*100);\r\n// }\r\n// async function sleep(ms) {\r\n//     return new Promise(res => {\r\n//         setTimeout(() => {\r\n//             res()\r\n//             console.log(ms);\r\n//         }, ms*100);\r\n//     })\r\n// }\r\n//\r\n//\r\n// async function show() {\r\n//     await sleep(3)\r\n//     await sleep(2)\r\n//     await sleep(1)\r\n// }\r\n//\r\n// show();\r\n\r\n\r\n// Task 8\r\n// let pr1 = new Promise((res) => {\r\n//     res(10);\r\n// });\r\n// let pr2 = new Promise((res) => {\r\n//     res(0)\r\n// });\r\n// pr1\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 2;\r\n//     })\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 2;\r\n//     })\r\n//     .then(console.log);\r\n// pr2\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 1;\r\n//     })\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 1;\r\n//     })\r\n//     .then(console.log);\r\n// 10 0 12 1 \r\n\r\n// just a plug\r\nexport default () => {\r\n};",{"ruleId":"15","severity":1,"message":"16","line":3,"column":8,"nodeType":"17","messageId":"18","endLine":3,"endColumn":15},{"ruleId":"15","severity":1,"message":"19","line":5,"column":8,"nodeType":"17","messageId":"18","endLine":5,"endColumn":15},{"ruleId":"15","severity":1,"message":"20","line":156,"column":5,"nodeType":"17","messageId":"18","endLine":156,"endColumn":15},{"ruleId":"21","severity":1,"message":"22","line":337,"column":1,"nodeType":"23","endLine":338,"endColumn":3},"@typescript-eslint/no-unused-vars","'Lesson1' is defined but never used.","Identifier","unusedVar","'Lesson3' is defined but never used.","'bigPromise' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration"]